class Solution {
    public void dfs(char[][] grid, int i, int j, int n, int m, int[] dx, int[] dy) {
        if (i < 0 || i >= n || j < 0 || j >= m || grid[i][j] != '1') {
            return;
        }
        grid[i][j] = '0';
        for (int dir = 0; dir < 4; dir++) {
            int newX = i + dx[dir];
            int newY = j + dy[dir];
            dfs(grid, newX, newY, n, m, dx, dy);
        }
    }

    public int numIslands(char[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int count = 0;

        int[] dx = {-1, 1, 0, 0};
        int[] dy = {0, 0, -1, 1};

        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (grid[i][j] == '1') {
                    count++;
                    dfs(grid, i, j, n, m, dx, dy);
                }
            }
        }

        return count;
    }
}
